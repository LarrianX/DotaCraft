name: Release Mod

on:
  workflow_dispatch:
    inputs:
      body:
        description: 'Описание релиза'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous workflow
        run: |
          ARTIFACT_NAME=build_artifacts
          WORKFLOW_RUN_ID=$(gh run list --workflow=build.yml --limit 1 --json databaseId --jq '.[0].databaseId')
          ARTIFACT_URL="https://api.github.com/repos/${{ github.repository }}/actions/runs/${WORKFLOW_RUN_ID}/artifacts"
          
          ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $ARTIFACT_URL | jq '.artifacts[] | select(.name == "'$ARTIFACT_NAME'") | .id')
          ARTIFACT_DOWNLOAD_URL="https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
          
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $ARTIFACT_DOWNLOAD_URL -o artifact.zip
          
          # Разархивация артефактов
          unzip artifact.zip

      - name: Extract version from file
        id: extract_version
        run: |
          filename=$(basename build/libs/*.jar)
          version=$(echo $filename | sed -n 's/.*-\([0-9]\+\.[0-9]\+\)-.*/\1/p')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Extract Minecraft version from file
        id: extract_minecraft_version
        run: |
          filename=$(basename build/libs/*.jar)
          minecraft_version=$(echo $filename | sed -n 's/.*-[0-9]\+\.[0-9]\+-\([0-9]\+\.[0-9]\+\.[0-9]\+\)\.jar/\1/p')
          echo "MINECRAFT_VERSION=$minecraft_version" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: ${{ github.event.inputs.body }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/dotacraft-${{ env.VERSION }}-${{ env.MINECRAFT_VERSION }}.jar
          asset_name: dotacraft-${{ env.VERSION }}-${{ env.MINECRAFT_VERSION }}.jar
          asset_content_type: application/java-archive
